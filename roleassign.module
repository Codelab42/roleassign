<?php

/**
 * @file
 * Allows site administrators to further delegate the task of managing user's
 * roles.
 */

/**
 * Implements hook_permission().
 *
 * While editing a user's account information, a user with the <code>assign
 * roles</code> permission will be able to select roles for the user from
 * a set of available roles. Roles available are configured by the site
 * administrator.
 */
function roleassign_permission() {
  $perm = user_permission();
  $perm = $perm['administer users']['title'];
  return array(
    'assign roles' => array(
      'title' => t('Assign roles'),
      'description' => t('Allow users with the %Administer_users permission to assign a restricted set of roles.', array('%Administer_users' => $perm)),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implements hook_menu().
 *
 * Adds <code>role assign</code> to <code>Administration Â» People</code>.
 */
function roleassign_menu() {
  $items = array();

  $items['admin/people/permissions/roleassign'] = array(
    'title' => 'Role assign',
    'description' => "Define the set of roles that can be assigned by admins with the 'Assign roles' permission.",
    'type' => MENU_LOCAL_TASK | MENU_VISIBLE_IN_TREE,
    'file' => 'roleassign.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('roleassign_admin_form'),
    'access arguments' => array('administer permissions'),
  );

  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Adds checkboxes for assignable roles to the user edit form.
 */
function roleassign_form_alter(&$form, &$form_state, $form_id) {

  // Do nothing if the user already has 'administer permissions' permission.
  if (user_access('administer permissions')) {
    return;
  }

  // Do nothing if the user hasn't both 'administer users' and
  // 'assign roles' permissions.
  if (!user_access('administer users') || !user_access('assign roles')) {
    return;
  }

  // Do nothing if right form isn't shown.
  if ($form_id != 'user_register_form' && ($form_id != 'user_profile_form' || !isset($form['account']))) {
    return;
  }

  _roleassign_module_load_include('admin.inc');
  _roleassign_form_alter($form, $form_state, $form_id);
}

/**
 * Implements hook_user_operations().
 *
 * Add or remove roles to selected users.
 * Thanks to hunmonk for the original code.
 */
function roleassign_user_operations() {
  // Do nothing if add and remove roles operations already is shown or
  // the user hasn't right to assign roles.
  if (user_access('administer permissions') || !user_access('assign roles')) {
    return;
  }

  _roleassign_module_load_include('admin.inc');
  return _roleassign_user_operations();
}

/**
 * Implements hook_help().
 *
 * Returns various help texts.
 */
function roleassign_help($path = "admin/help#roleassign", $arg) {
  _roleassign_module_load_include('admin.inc');
  return _roleassign_help($path, $arg);
}

/**
 * Helper function to load include files.
 */
function _roleassign_module_load_include($type) {
  static $loaded = array();

  if (!isset($loaded[$type])) {
    $path = module_load_include($type, 'roleassign');
    $loaded[$type] = drupal_get_path('module', 'roleassign') . "/roleassign.$type";
  }
  return $loaded[$type];
}
